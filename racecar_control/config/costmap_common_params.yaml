# The footprint of the roboot
footprint: [[-0.2, -0.1], [-0.2, 0.1], [0.2, 0.1], [0.2, -0.1]]
footprint_padding: 0.1

controlller_frequency: 10.0
controller_patience: 3.0

planner_frequency: 10.0
planner_patience: 5.0

# Specifies the delay in transform (tf) data that is tolerable in seconds.
transform_tolerance: 0.5
map_type: voxel
resolution: 0.05

# The global frame for the costmap to operate in
global_frame: map
robot_base_frame: base_link

plugins:
  # used to initialize the costmap from a static map
  - { name: static_layer, type: "costmap_2d::StaticLayer" } 
  - { name: obstacle_layer, type: "costmap_2d::VoxelLayer" }
  # used to inflate obstacles
  - { name: inflation_layer, type: "costmap_2d::InflationLayer" }

# The obstacle layer tracks the obstacles as read by the sensor data.
obstacle_layer:
  # The default maximum distance from the robot at which an obstacle will be inserted into the cost map in meters.
  obstacle_range: 2.0
  # The default range in meters at which to raytrace out obstacles from the map using sensor data
  raytrace_range: 3.0
  inflation_radius: 0.2
  # If false, each pixel has one of 2 states: lethal obstacle or free.
  track_unknown_space: true
  # Changes the behaviour how the obstacle_layer handles incoming data from layers beyond it.
  combination_method: 1
  # The topic on which sensor data comes in for this source
  observation_sources: laser_scan_sensor
  laser_scan_sensor:
    { data_type: LaserScan, topic: scan, marking: true, clearing: true }

# The inflation layer is an optimization that adds new values around lethal obstacles (i.e. inflates the obstacles)
inflation_layer:
  # exponential rate at which the obstacle cost drops off (default: 10)
  cost_scaling_factor: 20.0 
  # max. distance from an obstacle at which costs are incurred for planning paths.
  inflation_radius: 0.05


# The static map layer represents a largely unchanging portion of the costmap
static_layer:
  # The topic that the costmap subscribes to for the static map.
  map_topic: map

